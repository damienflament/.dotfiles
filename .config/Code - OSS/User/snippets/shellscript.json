{
	// Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Expand parameter with default value": {
		"prefix": "parameter-value-default",
		"body": "${${1:parameter}:-${2:default value}}"
	},
	"Expand parameter while checking for null or unset value": {
		"prefix": "parameter-value-check",
		"body": "${${1:parameter}:?${2:error message}}"
	},
	"Case statement": {
		"prefix": "case",
		"body": [
			"case $${1:parameter} in",
			"    ${2:value})",
			"        $3",
			"        ;;",
			"    *)",
			"        $0",
			"        ;;",
			"esac"
		]
	},
	"Options parsing": {
		"prefix": "getopts",
		"body": [
			"local OPT",
			"local OPTIND",
			"",
			"while getopts '${1:option}' OPT; do",
			"    case $$OPT in",
			"        ${1:option})",
			"            ${2:statement}",
			"            ;;",
			"        *) return 1 ;;",
			"    esac",
			"done",
		]
	},
	"Change directory": {
		"prefix": "cd",
		"body": "cd ${1:directory} || return",
	},
	"Shellcheck with Bash": {
		"prefix": "shellcheck-bash",
		"body": "# shellcheck shell=bash",
		"description": "Tells to Shellcheck this script is designed for Bash"
	},
	"Ignore Shellcheck error": {
		"prefix": "shellcheck-disable",
		"body": "# shellcheck disable=SC${1:0000}",

	},
	"Bash unofficial strict mode": {
		"prefix": "bash-strict-mode",
		"body": [
			"# Bash strict mode",
			"set -euo pipefail",
			"IFS=$'\\n\\t'"
		]
	},
	"Debug parameter": {
		"prefix": "debug-parameter",
		"body": "echo \"${1:parameter}: \\$${1:parameter}\" >&2"
	},
	"Debug array parameter": {
		"prefix": "debug-array-parameter",
		"body": "echo \"${1:parameter} (\\${#${1:parameter}[@]}): \\${${1:parameter}[*]}\" >&2"
	}
}
